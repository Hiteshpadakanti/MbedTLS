# tls13_compat/__init__.py
#
# Copyright The Mbed TLS Contributors
# SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later

"""
    TLS 1.3 test generate utils
"""
import os
import stat
import sys
from .compat_test import generate_tls13_compat_test_cases, generate_tls13_hrr_ephemeral_test_cases


TLS13_TEST_SUITES = {"tls13-compat": [generate_tls13_compat_test_cases,
                                      generate_tls13_hrr_ephemeral_test_cases]}


SSL_OUTPUT_HEADER = '''#!/bin/sh

# {filename}
#
# Copyright The Mbed TLS Contributors
# SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later
#
# Purpose
#
# List TLS1.3 test cases. They are generated by
# `{cmd}`.
#
# PLEASE DO NOT EDIT THIS FILE. IF NEEDED, PLEASE MODIFY `generate_tls13_compat_tests.py`
# OR PYTHON FILES IN `tests/scripts/tls13_compat` AND REGENERATE THIS FILE.
#
'''


def write_tests_to_file(f, filename, generate_functions, cmd):
    """
    Write test cases to file
    """
    f.write(SSL_OUTPUT_HEADER.format(
        filename=os.path.basename(filename), cmd=cmd))

    def _gen_test_cases():
        for function in generate_functions:
            yield from function()
    for case in _gen_test_cases():
        if not case:
            continue
        f.write('\n')
        f.write(case)
        f.write('\n')


def output_test_cases(tests, output_path, cmd):
    """
    Main entry for code generator
    """
    for test in tests:
        if output_path:
            path = os.path.join(output_path, test + '.sh')
            with open(path, 'w') as f:
                write_tests_to_file(f, path, TLS13_TEST_SUITES[test], cmd)
            os.chmod(path, os.stat(path).st_mode | stat.S_IEXEC)
        else:
            write_tests_to_file(sys.stdout, test + '.sh',
                                TLS13_TEST_SUITES[test], cmd)
