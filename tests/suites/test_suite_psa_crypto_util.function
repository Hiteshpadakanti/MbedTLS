/* BEGIN_HEADER */
#include <test/helpers.h>
#include <mbedtls/psa_util.h>
/* END_HEADER */

/* BEGIN_CASE depends_on:MBEDTLS_PSA_UTIL_HAVE_ECDSA */
void ecdsa_raw_to_der(int key_bits, data_t *input, data_t *exp_result, int exp_ret)
{
    unsigned char *tmp_buf = NULL;
    size_t tmp_buf_len = exp_result->len;
    size_t ret_len;

    TEST_CALLOC(tmp_buf, tmp_buf_len);

    TEST_EQUAL(mbedtls_ecdsa_raw_to_der(input->x, input->len,
                                        tmp_buf, tmp_buf_len, &ret_len,
                                        key_bits), exp_ret);

    if (exp_ret == 0) {
        ASSERT_COMPARE(exp_result->x, exp_result->len, tmp_buf, ret_len);
    }

exit:
    mbedtls_free(tmp_buf);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_PSA_UTIL_HAVE_ECDSA */
void ecdsa_der_to_raw(int key_bits, data_t *input, data_t *exp_result, int exp_ret)
{
    unsigned char *tmp_buf = NULL;
    size_t tmp_buf_len = exp_result->len;
    size_t ret_len;

    TEST_CALLOC(tmp_buf, tmp_buf_len);

    TEST_EQUAL(mbedtls_ecdsa_der_to_raw(input->x, input->len,
                                        tmp_buf, tmp_buf_len, &ret_len,
                                        key_bits), exp_ret);

    if (exp_ret == 0) {
        ASSERT_COMPARE(exp_result->x, exp_result->len, tmp_buf, ret_len);
    }

exit:
    mbedtls_free(tmp_buf);
}
/* END_CASE */
