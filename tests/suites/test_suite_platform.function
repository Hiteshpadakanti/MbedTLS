/* BEGIN_HEADER */

/* This test module exercises the platform_* module. Since, depending on the
 * underlying operating system, the time routines are not always reliable,
 * this suite only performs very basic sanity checks of the timing API.
 */

#include <limits.h>

#if defined(MBEDTLS_HAVE_TIME)
#include "mbedtls/platform_time.h"

#if defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__) || \
    defined(__MINGW32__) || defined(_WIN64)
#include <windows.h>
#elif _POSIX_C_SOURCE >= 199309L
#include <time.h>
#else
#include <unistd.h>
#endif
void sleep_ms(int milliseconds)
{
#if defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__) || \
    defined(__MINGW32__) || defined(_WIN64)
    Sleep(milliseconds);
#elif _POSIX_C_SOURCE >= 199309L
    struct timespec ts;
    ts.tv_sec = milliseconds / 1000;
    ts.tv_nsec = (milliseconds % 1000) * 1000000;
    nanosleep(&ts, NULL);
#else
    usleep(milliseconds * 1000);
#endif
}


int test_time_delay_milliseconds_once(int delay_ms)
{
    mbedtls_ms_time_t current = mbedtls_ms_time();
    mbedtls_ms_time_t end;
    mbedtls_ms_time_t elapsed_ms;

    sleep_ms(delay_ms);

    end = mbedtls_ms_time();
    elapsed_ms = end - current;

    return elapsed_ms > 0 && elapsed_ms >= delay_ms && \
           elapsed_ms < 4000 + delay_ms;
}

int test_time_delay_seconds_once(int delay_secs)
{
    mbedtls_time_t current = mbedtls_time(NULL);
    mbedtls_time_t end;
    mbedtls_time_t elapsed_secs;

    sleep_ms(delay_secs * 1000);

    end = mbedtls_time(NULL);
    elapsed_secs = end - current;

    return elapsed_secs > 0 && elapsed_secs - delay_secs >= -1 && \
           elapsed_secs - delay_secs <   4;

}
#define MBEDTLS_TIME_DELAY_TEST_RETRIES 3
#endif
/* END_HEADER */

/* BEGIN_DEPENDENCIES */

/* END_DEPENDENCIES */

/* BEGIN_CASE depends_on:MBEDTLS_HAVE_TIME */
void time_delay_milliseconds(int delay_ms)
{
    int i;
    unsigned flag = 0;
    for (i = 0; i < MBEDTLS_TIME_DELAY_TEST_RETRIES; i++) {
        if (test_time_delay_milliseconds_once(delay_ms)) {
            break;
        }
        flag |= 1 << i;
    }
    TEST_ASSERT(flag != (1 << MBEDTLS_TIME_DELAY_TEST_RETRIES) - 1);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_HAVE_TIME */

/*
 * WARNING: DO NOT ENABLE THIS TEST. We keep the code here to document the
 *          reason.
 *
 *          The test often failed on the CI. See #1517. CI failures cannot be
 *          completely avoided due to out-of-sync clock sources.
 */
void time_delay_seconds(int delay_secs)
{
    int i;
    unsigned flag = 0;
    for (i = 0; i < 3; i++) {
        if (test_time_delay_seconds_once(delay_secs)) {
            break;
        }
        flag |= 1 << i;
    }
    TEST_ASSERT(flag != (1 << MBEDTLS_TIME_DELAY_TEST_RETRIES) - 1);
}
/* END_CASE */
