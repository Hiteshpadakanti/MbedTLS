/* BEGIN_HEADER */
#include "mbedtls/eddsa.h"
#include "mbedtls/shake256.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_EDDSA_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void eddsa_sign_ed25519( data_t *key, data_t *message, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_mpi r, s;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t sign_buf[64];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    mbedtls_eddsa_init( &ctx );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );

    TEST_ASSERT( mbedtls_eddsa_sign( &ctx.grp, &r, &s, &ctx.d, message->x, message->len, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info, MBEDTLS_EDDSA_PURE, NULL, 0 ) == 0 );
    mbedtls_mpi_write_binary_le( &r, sign_buf, sizeof( sign_buf ) );
    mbedtls_mpi_write_binary_le( &s, sign_buf+32, sizeof( sign_buf )-32 );

    TEST_ASSERT( memcmp( tv->x, sign_buf, tv->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_sign_ed25519ctx( data_t *key, data_t *message, data_t *ed_ctx, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_mpi r, s;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t sign_buf[64];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    mbedtls_eddsa_init( &ctx );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );

    TEST_ASSERT( mbedtls_eddsa_sign( &ctx.grp, &r, &s, &ctx.d, message->x, message->len, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info, MBEDTLS_EDDSA_CTX, ed_ctx->x, ed_ctx->len ) == 0 );
    mbedtls_mpi_write_binary_le( &r, sign_buf, sizeof( sign_buf ) );
    mbedtls_mpi_write_binary_le( &s, sign_buf+32, sizeof( sign_buf )-32 );

    TEST_ASSERT( memcmp( tv->x, sign_buf, tv->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_sign_ed25519ph( data_t *key, data_t *message, data_t *ed_ctx, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_mpi r, s;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t sign_buf[64], sha_buf[64];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    mbedtls_eddsa_init( &ctx );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_sha512( message->x, message->len, sha_buf, 0 ) == 0 );

    TEST_ASSERT( mbedtls_eddsa_sign( &ctx.grp, &r, &s, &ctx.d, sha_buf, 64, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info, MBEDTLS_EDDSA_PREHASH, ed_ctx->x, ed_ctx->len ) == 0 );
    mbedtls_mpi_write_binary_le( &r, sign_buf, sizeof( sign_buf ) );
    mbedtls_mpi_write_binary_le( &s, sign_buf+32, sizeof( sign_buf )-32 );

    TEST_ASSERT( memcmp( tv->x, sign_buf, tv->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_sign_ed448( data_t *key, data_t *message, data_t *ed_ctx, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_mpi r, s;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t sign_buf[114];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    mbedtls_eddsa_init( &ctx );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED448, &ctx, key->x, key->len ) == 0 );

    TEST_ASSERT( mbedtls_eddsa_sign( &ctx.grp, &r, &s, &ctx.d, message->x, message->len, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info, MBEDTLS_EDDSA_PURE, ed_ctx->x, ed_ctx->len ) == 0 );
    mbedtls_mpi_write_binary_le( &r, sign_buf, sizeof( sign_buf ) );
    mbedtls_mpi_write_binary_le( &s, sign_buf+57, sizeof( sign_buf )-57 );

    TEST_ASSERT( memcmp( tv->x, sign_buf, tv->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_sign_ed448ph( data_t *key, data_t *message, data_t *ed_ctx, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_mpi r, s;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t sign_buf[114], shake_buf[64];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    mbedtls_eddsa_init( &ctx );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED448, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_shake256( message->x, message->len, shake_buf, 64 ) == 0 );

    TEST_ASSERT( mbedtls_eddsa_sign( &ctx.grp, &r, &s, &ctx.d, shake_buf, 64, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info, MBEDTLS_EDDSA_PREHASH, ed_ctx->x, ed_ctx->len ) == 0 );
    mbedtls_mpi_write_binary_le( &r, sign_buf, sizeof( sign_buf ) );
    mbedtls_mpi_write_binary_le( &s, sign_buf+57, sizeof( sign_buf )-57 );

    TEST_ASSERT( memcmp( tv->x, sign_buf, tv->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_point_ed25519( data_t *key, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t buf[32];
    size_t olen = 0;
    
    mbedtls_eddsa_init( &ctx ); 
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_ecp_point_write_binary( &ctx.grp, &ctx.Q, MBEDTLS_ECP_PF_COMPRESSED, &olen, buf, 
                                        sizeof( buf ) ) == 0 );

    TEST_ASSERT( memcmp( tv->x, buf, tv->len ) == 0 );

exit:
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_point_ed448( data_t *key, data_t *tv ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    uint8_t buf[57];
    size_t olen = 0;
    
    mbedtls_eddsa_init( &ctx ); 
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED448, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_ecp_point_write_binary( &ctx.grp, &ctx.Q, MBEDTLS_ECP_PF_COMPRESSED, &olen, buf, 
                                       sizeof( buf ) ) == 0 );

    TEST_ASSERT( memcmp( tv->x, buf, tv->len ) == 0 );

exit:
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_verify_ed25519( data_t *key, data_t *message, data_t *signature ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    mbedtls_mpi r, s;
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    mbedtls_eddsa_init( &ctx );
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &r, signature->x, 32 ) == 0 );
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &s, signature->x + 32, 32 ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_eddsa_verify( &ctx.grp, message->x, message->len, &ctx.Q, &r, &s, 
                                       &mbedtls_test_rnd_pseudo_rand, &rnd_info, MBEDTLS_EDDSA_PURE, NULL, 0 ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_verify_ed25519ctx( data_t *key, data_t *message, data_t *ed_ctx, data_t *signature ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    mbedtls_mpi r, s;
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    mbedtls_eddsa_init( &ctx );
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &r, signature->x, 32 ) == 0 );
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &s, signature->x + 32, 32 ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_eddsa_verify( &ctx.grp, message->x, message->len, &ctx.Q, &r, &s, 
                                       &mbedtls_test_rnd_pseudo_rand, &rnd_info, MBEDTLS_EDDSA_CTX, ed_ctx->x, ed_ctx->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_verify_ed25519ph( data_t *key, data_t *message, data_t *ed_ctx, data_t *signature ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    mbedtls_mpi r, s;
    unsigned char sha_buf[64];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    mbedtls_eddsa_init( &ctx );
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED25519, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &r, signature->x, 32 ) == 0 );
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &s, signature->x + 32, 32 ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_sha512( message->x, message->len, sha_buf, 0 ) == 0 );
                                       
    TEST_ASSERT( mbedtls_eddsa_verify( &ctx.grp, sha_buf, 64, &ctx.Q, &r, &s, 
                                       &mbedtls_test_rnd_pseudo_rand, &rnd_info, MBEDTLS_EDDSA_PREHASH, ed_ctx->x, ed_ctx->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_verify_ed448( data_t *key, data_t *message, data_t *ed_ctx, data_t *signature ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    mbedtls_mpi r, s;
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    mbedtls_eddsa_init( &ctx );
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED448, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &r, signature->x, 57 ) == 0 );
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &s, signature->x + 57, 57 ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_eddsa_verify( &ctx.grp, message->x, message->len, &ctx.Q, &r, &s, 
                                       &mbedtls_test_rnd_pseudo_rand, &rnd_info, MBEDTLS_EDDSA_PURE, ed_ctx->x, ed_ctx->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void eddsa_verify_ed448ph( data_t *key, data_t *message, data_t *ed_ctx, data_t *signature ) 
{
    mbedtls_eddsa_context ctx;
    mbedtls_test_rnd_pseudo_info rnd_info;
    mbedtls_mpi r, s;
    unsigned char shake_buf[64];
    
    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );
    mbedtls_eddsa_init( &ctx );
    
    memset( &rnd_info, 0x00, sizeof( mbedtls_test_rnd_pseudo_info ) );
    
    TEST_ASSERT( mbedtls_ecp_read_key( MBEDTLS_ECP_DP_ED448, &ctx, key->x, key->len ) == 0 );
    
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &r, signature->x, 57 ) == 0 );
    TEST_ASSERT( mbedtls_mpi_read_binary_le( &s, signature->x + 57, 57 ) == 0 );
    
    TEST_ASSERT( mbedtls_ecp_point_edwards( &ctx.grp, &ctx.Q, &ctx.d, &ctx.grp.G, &mbedtls_test_rnd_pseudo_rand,
                                       &rnd_info ) == 0 );
                                       
    TEST_ASSERT( mbedtls_shake256( message->x, message->len, shake_buf, 64 ) == 0 );
                                       
    TEST_ASSERT( mbedtls_eddsa_verify( &ctx.grp, shake_buf, 64, &ctx.Q, &r, &s, 
                                       &mbedtls_test_rnd_pseudo_rand, &rnd_info, MBEDTLS_EDDSA_PREHASH, ed_ctx->x, ed_ctx->len ) == 0 );

exit:
    mbedtls_mpi_free(&r);
    mbedtls_mpi_free(&s);
    mbedtls_eddsa_free(&ctx);
}
/* END_CASE */
