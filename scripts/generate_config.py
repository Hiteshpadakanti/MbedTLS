#!/usr/bin/env python3
# type: ignore

"""Mbed TLS user configuration file generate.
"""

# Copyright The Mbed TLS Contributors
# SPDX-License-Identifier: Apache-2.0
##
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
##
# http://www.apache.org/licenses/LICENSE-2.0
##
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import re
import argparse
from subprocess import check_output
from textwrap import dedent


from unidiff import PatchSet
from config import ConfigFile

def get_changed(file_path):
    """Get changed config in config.h"""
    patch = PatchSet.from_string(
                check_output(['git', 'diff', '--', file_path],
                             universal_newlines=True))

    def iter_lines():
        for i in patch[0]:
            yield from i.target_lines()
    _define_line_regexp = (r'(?P<indentation>\s*)' +
                           r'(?P<commented_out>(//\s*)?)' +
                           r'(?P<define>#\s*define\s+)' +
                           r'(?P<name>\w+)' +
                           r'(?P<arguments>(?:\((?:\w|\s|,)*\))?)' +
                           r'(?P<separator>\s*)' +
                           r'(?P<value>.*)')
    regex = re.compile(_define_line_regexp)
    for line in iter_lines():
        if line.is_added or line.is_removed:
            line = str(line)[1:].strip()
            m = regex.match(line)
            yield not m['commented_out'], m['name'], m['value']


def main():
    parser = argparse.ArgumentParser()
    enable_arg_pair_regexp = re.compile(r'(?P<name>\w+)=?(?P<value>.*)')
    disable_arg_pair_regexp = re.compile(r'(?P<name>\w+)')

    def enable_arg(arg):
        m = enable_arg_pair_regexp.match(arg)
        assert m, arg
        return True, m['name'], m['value']

    def disable_arg(arg):
        m = disable_arg_pair_regexp.match(arg)
        assert m, arg
        return False, m['name'], ''
    parser.add_argument('-e', '--enable', type=enable_arg,
                        nargs='+', default=[])
    parser.add_argument('-d', '--disable', nargs='+',
                        type=disable_arg, default=[])
    parser.add_argument('-i', '--input', nargs='?', default=None)
    parser.add_argument('-o', '--output', nargs='?',
                        type=argparse.FileType('w'), default=sys.stdout)
    parser.add_argument('-w', '--over-write', action='store_true')
    args = parser.parse_args()
    config = ConfigFile(filename=args.input)
    if args.over_write:
        processed_settings = set()
        for active, name, value in args.enable + args.disable:
            assert name in config.settings, \
                '{name} is not valid config'.format(**locals())
            assert bool(config.settings[name].value) == bool(value), \
                '{name}={value} is not valid config'.format(**locals())
            assert name not in processed_settings, \
                '{name} has been added in argument'.format(**locals())
            config.settings[name].active = active
            config.settings[name].value = value
        config.write()
        return 0
    args.output.write(dedent(r'''\
        /* This file is generated by {filename}
         *     To use it `export CFLGS="-I$PWD -DMBEDTLS_USER_CONFIG_FILE=\"<{headerfile}>\""
         */
        #include "mbedtls/mbedtls_config.h"
        ''').format(filename=__file__, headerfile=args.output.name))
    target_settings = {}
    for active, name, value in get_changed(config.filename):
        target_settings[name] = (active, value)
    processed_settings = set()
    for active, name, value in args.enable + args.disable:
        assert name in config.settings, '{name} is not valid config'.format(**locals())
        assert bool(config.settings[name].value) == bool(value), \
            '{name}={value} is not valid config'.format(**locals())
        assert name not in processed_settings, \
                '{name} has been added in argument'.format(**locals())
        target_settings[name] = (active, value)
    for name, v in target_settings.items():
        active, value = v
        if value and active:
            args.output.write(dedent('''\
                            #if defined({name})
                            #undef {name}
                            #endif
                            #define {name} {value}
                            ''').format(**locals()))

        elif active:
            args.output.write(dedent('''\
                            #if !defined({name})
                            #define {name}
                            #endif
                            ''').format(**locals()))
        else:
            args.output.write(dedent('''\
                #if defined({name})
                #undef {name}
                #endif
                ''').format(**locals()))
    return 0

if __name__ == '__main__':
    sys.exit(main())
